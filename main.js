/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var crypto = __toESM(require("crypto"));
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "rename-note-images",
      name: "\u91CD\u547D\u540D\u7B14\u8BB0\u4E2D\u7684\u56FE\u7247",
      icon: "image-plus",
      // 使用 Lucide 图标
      callback: async () => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (activeView) {
          const file = activeView.file;
          if (file) {
            await this.updateAllImageNameAndLinksInNote(file, file.path, file.path);
            new import_obsidian.Notice("\u56FE\u7247\u91CD\u547D\u540D\u5B8C\u6210\uFF01");
          }
        } else {
          new import_obsidian.Notice("\u8BF7\u5148\u6253\u5F00\u4E00\u4E2A\u7B14\u8BB0\u6587\u4EF6\uFF01");
        }
      }
    });
    this.registerEvent(
      this.app.vault.on("create", (file) => {
        if (file instanceof import_obsidian.TFile && this.isImageFile(file)) {
          this.renameImageFile(file);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", (file, oldPath) => {
        if (file instanceof import_obsidian.TFile && file.extension === "md") {
          this.updateAllImageNameAndLinksInNote(file, oldPath, file.path);
        }
      })
    );
  }
  // 更新笔记中的所有图片链接
  async updateAllImageNameAndLinksInNote(note, oldFileName, newFileName) {
    const content = await this.app.vault.read(note);
    const imageRegex = /!\[.*?\]\((.*)\)/g;
    let imageUrlMatches = [...content.matchAll(imageRegex)];
    const validImageExtensions = [".jpg", ".jpeg", ".png", ".gif", ".webp", ".svg"];
    console.log("\u{1F5BC}\uFE0F \u7B14\u8BB0\u4E2D\u7684\u6240\u6709\u56FE\u7247\u94FE\u63A5:");
    imageUrlMatches.forEach((match, index) => {
      const imageUrl = match[1];
      const isValidImage = validImageExtensions.some(
        (ext) => imageUrl.toLowerCase().endsWith(ext)
      );
      if (isValidImage) {
        console.log(`  ${index + 1}. ${imageUrl}`);
      } else {
        console.log(`  \u26A0\uFE0F ${index + 1}. ${imageUrl} (\u4E0D\u652F\u6301\u7684\u56FE\u7247\u683C\u5F0F)`);
      }
    });
    let decodedImageLinks = [];
    imageUrlMatches.forEach((match) => {
      const imageUrl = match[1];
      const decodedUrl = decodeURIComponent(imageUrl);
      decodedImageLinks.push(decodedUrl);
    });
    console.log("\u{1F525}decodedImageLinks\uFF1A", decodedImageLinks);
    let newImageLinks = [];
    decodedImageLinks.forEach((imageUrl) => {
      const extension = imageUrl.split(".").pop() || "";
      const fileName = imageUrl.split("/").pop() || "";
      const hash = this.generateHash(fileName + Date.now());
      const newFileName2 = `${note.basename}_${hash}.${extension}`;
      newImageLinks.push(newFileName2);
    });
    console.log("\u{1F525}\u6784\u9020\u7684\u65B0\u56FE\u7247\u6587\u4EF6\u540D\uFF1A", newImageLinks);
    let updatedContent = await this.app.vault.read(note);
    for (let i = 0; i < decodedImageLinks.length; i++) {
      const imageUrl = decodedImageLinks[i];
      const file = this.app.vault.getAbstractFileByPath(imageUrl);
      if (file instanceof import_obsidian.TFile) {
        const attachmentsFolder = this.getAttachmentsFolder();
        const newPath = (0, import_obsidian.normalizePath)(`${attachmentsFolder}/${newImageLinks[i]}`);
        const encodedNewPath = newPath.replace(/ /g, "%20");
        await this.app.vault.rename(file, newPath);
        const originalUrl = imageUrlMatches[i][1];
        updatedContent = updatedContent.replace(originalUrl, encodedNewPath);
        console.log(`\u{1F504} \u56FE\u7247\u91CD\u547D\u540D: ${originalUrl} -> ${encodedNewPath}`);
      }
    }
    await this.app.vault.modify(note, updatedContent);
  }
  // 检查文件是否是图片
  isImageFile(file) {
    const imageExtensions = ["png", "jpg", "jpeg", "gif", "bmp", "webp"];
    return imageExtensions.includes(file.extension);
  }
  // 重命名图片文件
  async renameImageFile(file) {
    const attachmentsFolder = this.getAttachmentsFolder();
    console.log("\u{1F525}attachmentsFolder\uFF1A", attachmentsFolder);
    if (!file.path.startsWith(attachmentsFolder)) {
      return;
    }
    console.log("\u{1F525}file\uFF1A", file);
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      return;
    }
    console.log("\u{1F525}\u7B14\u8BB0\u7684activeFile\uFF1A", activeFile);
    const noteName = activeFile.basename;
    const oldFileName = file.name;
    console.log("\u{1F525}\u6587\u4EF6\u7684\u65E7\u540D\u5B57\uFF1A", oldFileName);
    console.log("\u{1F525}\u7B14\u8BB0\u7684\u540D\u5B57\uFF1A", noteName);
    const hash = this.generateHash(file.name + Date.now());
    const newFileName = `${noteName}_${hash}.${file.extension}`;
    console.log("\u{1F525}newFileName\uFF1A", newFileName);
    const newPath = (0, import_obsidian.normalizePath)(`${attachmentsFolder}/${newFileName}`);
    await this.app.vault.rename(file, newPath);
    console.log("\u{1F525}newPath\uFF1A", newPath);
    await this.updateImageLink(activeFile, oldFileName, newFileName);
    new import_obsidian.Notice(`\u56FE\u7247\u94FE\u63A5\u66F4\u65B0\u4E3A\uFF1A${newFileName}`);
  }
  // 获取 attachments 文件夹路径
  getAttachmentsFolder() {
    const attachmentsFolder = this.app.vault.getConfig("attachmentFolderPath") || "attachments";
    return (0, import_obsidian.normalizePath)(attachmentsFolder);
  }
  // 生成 8 位哈希值
  generateHash(input) {
    return crypto.createHash("md5").update(input).digest("hex").slice(0, 8);
  }
  async updateImageLink(note, oldFileName, newFileName) {
    console.log(`\u{1F50D} \u5F00\u59CB\u66F4\u65B0\u7B14\u8BB0 (${note.path})\uFF0C\u65E7\u6587\u4EF6\u540D: ${oldFileName}, \u65B0\u6587\u4EF6\u540D: ${newFileName}`);
    oldFileName = oldFileName.replace(/ /g, "%20");
    let foundMatch = false;
    let attempts = 0;
    let content = await this.app.vault.read(note);
    console.log("\u{1F4C4} \u8BFB\u53D6\u7B14\u8BB0\u5185\u5BB9:\n", content);
    const start = Date.now();
    while (attempts < 100) {
      if (content.includes(oldFileName)) {
        foundMatch = true;
        const end = Date.now();
        console.log(`\u{1F552} \u66F4\u65B0\u7B14\u8BB0\u94FE\u63A5\u7528\u65F6: ${(end - start) / 1e3} \u79D2`);
        break;
      }
      console.log(`\u23F3 \u7B49\u5F85\u56FE\u7247\u94FE\u63A5\u751F\u6210... \u5C1D\u8BD5 ${attempts + 1}`);
      await new Promise((resolve) => setTimeout(resolve, 50));
      content = await this.app.vault.read(note);
      attempts++;
      console.log("\u{1F4C4} \u8BFB\u53D6\u7B14\u8BB0\u5185\u5BB9:\n", content);
    }
    if (foundMatch) {
      console.log("\u270F\uFE0F \u66F4\u65B0 Markdown \u4E2D\u7684\u56FE\u7247\u94FE\u63A5...");
      const updatedContent = content.replace(oldFileName, newFileName);
      await this.app.vault.modify(note, updatedContent);
      console.log("\u2705 \u56FE\u7247\u5F15\u7528\u66F4\u65B0\u5B8C\u6210");
    } else {
      console.log("\u274C \u56FE\u7247\u94FE\u63A5\u672A\u751F\u6210\uFF0C\u8DF3\u8FC7\u66F4\u65B0");
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
